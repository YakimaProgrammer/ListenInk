File: src/components/auth/Register.js
```
Content:
import React from "react";

export function Register() {
    return (
        <div>
        </div>
    );
}

```
File: src/components/auth/Login.js
```
Content:
import React from "react";

export function Login() {
    return (
        <div>
        </div>
    );
}

```
File: src/components/layout/Search.css
```
Content:
.search-container {
    position: relative;
    background: white;
    border: 1px solid #ccc;
    border-radius: 5px;
    width: 200px;
    /* Adjust as needed */
    z-index: 10000;
    padding: 8px;
}

.search-popup {
    z-index: 10001;
    /* Higher than other components */
}

.search-input {
    width: 100%;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.search-results {
    max-height: 150px;
    overflow-y: auto;
    margin-top: 8px;
    border-top: 1px solid #ddd;
    padding-top: 5px;
}

.search-result {
    padding: 5px;
    border: none;
    background: none;
    text-align: left;
    width: 100%;
    cursor: pointer;
}

.search-result:hover {
    background-color: #f0f0f0;
}

.no-results {
    font-size: 0.9em;
    color: gray;
    text-align: center;
}

```
File: src/components/layout/MainApp.js
```
Content:
import React, { useState, useEffect, useRef } from "react";
import "./MainApp.css";
import Sidebar from "./Sidebar";
import AudioControls from "./AudioControls";
import "bootstrap-icons/font/bootstrap-icons.css";
import PDFDropModal from "./PDFDropModal";
import MainPdf from "../pdfViewer/MainPdf.js";

import { useCategories } from "../../contexts/CategoriesContext";

function MainApp() {
  const {
    categories,
    documents,
    curDocument,
    setCurDocument,
    addNewDocument,
    // updateDocumentName,
    pdfByDocId,
    renameDocument, // assume you have that too
    addNewCategory,
  } = useCategories();

  const [showAddDropdownMain, setShowAddDropdownMain] = useState(false);

  const toggleAddDropdownMain = () => setShowAddDropdownMain((prev) => !prev);

  // Popup state for the “Add New” button
  const [showAddPopup, setShowAddPopup] = useState(false);

  const [isSidebarVisible, setIsSidebarVisible] = useState(true);
  const [isPdfModalOpen, setIsPdfModalOpen] = useState(false);

  // 1) Add local state for editing
  const [editingTitle, setEditingTitle] = useState(false);
  const [tempName, setTempName] = useState("");

  const toggleSidebar = () => {
    setIsSidebarVisible(!isSidebarVisible);
  };

  // [NEW CODE] Ref to the “Add New” popup container
  const addPopupRef = useRef(null);

  useEffect(() => {
    let dragCounter = 0;

    // Fired when a dragged item enters the browser window
    const handleDragEnter = (e) => {
      // Only show modal if we are dragging "Files" (not text or links)
      if ([...e.dataTransfer.types].includes("Files")) {
        dragCounter++;
        setIsPdfModalOpen(true);
      }
    };

    // Fired when a dragged item leaves an element within the window
    // (can happen many times as the user moves over child elements)
    const handleDragLeave = () => {
      dragCounter--;
      if (dragCounter <= 0) {
        dragCounter = 0;
        setIsPdfModalOpen(false);
      }
    };
    const handleDragOver = (e) => e.preventDefault();
    const handleDrop = () => {
      dragCounter = 0;
      setIsPdfModalOpen(false);
    };

    window.addEventListener("dragenter", handleDragEnter);
    window.addEventListener("dragleave", handleDragLeave);
    window.addEventListener("dragover", handleDragOver);
    window.addEventListener("drop", handleDrop);

    return () => {
      window.removeEventListener("dragenter", handleDragEnter);
      window.removeEventListener("dragleave", handleDragLeave);
      window.removeEventListener("dragover", handleDragOver);
      window.removeEventListener("drop", handleDrop);
    };
  }, []);

  // [NEW CODE] Close the Add New popup if user clicks away or presses ESC
  useEffect(() => {
    const handleGlobalClick = (e) => {
      // If the popup is open and the click is outside the popup, close it
      if (showAddPopup) {
        if (addPopupRef.current && !addPopupRef.current.contains(e.target)) {
          setShowAddPopup(false);
        }
      }
    };

    const handleKeyDown = (e) => {
      if (e.key === "Escape") {
        // If open, close the popup
        if (showAddPopup) {
          setShowAddPopup(false);
        }
      }
    };

    document.addEventListener("mousedown", handleGlobalClick);
    document.addEventListener("keydown", handleKeyDown);

    return () => {
      document.removeEventListener("mousedown", handleGlobalClick);
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [showAddPopup]);

  const handleAddDocument = () => {
    let newId =
      documents.reduce((maxId, doc) => Math.max(maxId, doc.id), -1) + 1;
    const newDocument = {
      name: "New Document " + newId,
      text: "This is a new document " + newId,
      id: newId,
    };
    addNewDocument(newDocument);
  };

  const handleAddCategory = () => {
    let newId =
      categories.reduce((maxId, doc) => Math.max(maxId, doc.id), -1) + 1;
    const newCategory = {
      name: "New Category " + newId,
      id: newId,
    };
    addNewCategory(newCategory);
  };

  // 2) Double-click to start editing
  const handleTitleDoubleClick = () => {
    if (curDocument) {
      setTempName(curDocument.name || "");
      setEditingTitle(true);
    }
  };

  // 3) Handle blur (or "Enter") to save
  const handleTitleBlur = () => {
    if (curDocument && tempName.trim() !== "") {
      // This calls the context's function, which dispatches the Redux action
      renameDocument(curDocument.id, tempName.trim());

      // ALSO update your local "curDocument" so it matches instantly
      setCurDocument({ ...curDocument, name: tempName.trim() });
    }
    setEditingTitle(false);
  };

  // Optional: Handle "Enter" key to finish editing
  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      e.target.blur();
    }
  };

  const docHasPdf = curDocument && pdfByDocId[curDocument.id];

  return (
    <div
      className={`app-container ${!isSidebarVisible ? "sidebar-hidden" : ""}`}
    >
      {/* Sidebar */}
      <aside className={`sidebar ${!isSidebarVisible ? "hidden" : ""}`}>
        <Sidebar
          onToggleSidebar={toggleSidebar}
          handleAddDocument={handleAddDocument}
          handleAddCategory={handleAddCategory}
        />
      </aside>

      {/* Main Content Area */}
      <main className="main-content">
        <div className="top-view">
          <div className="hstack">
            {/* Toggle Sidebar */}
            <button
              className={`toggle ${!isSidebarVisible ? "sidebar-hidden" : ""}`}
              onClick={toggleSidebar}
            >
              <i className="bi bi-layout-sidebar"></i>
            </button>

            {/* Our new Add New button + popup */}
            <div className="add-new-button-container">
              <button
                className="add-new-toggle" onClick={() => setShowAddPopup((prev) => !prev)}
              >
                <i className="bi bi-pencil-square" />
              </button>

              {/* The popup that appears below the button */}
              {showAddPopup && (
                <div className="add-new-popup" ref={addPopupRef}>
                  <div className="add-new-popup-content">
                    <button onClick={() => {
                      handleAddDocument()
                      setShowAddPopup((prev) => !prev)
                    }}
                      className="hstack-left">
                      <i class="bi bi-file-earmark-text"></i>
                      Create New Document
                    </button>
                    <button onClick={() => {
                      handleAddCategory()
                      setShowAddPopup((prev) => !prev)
                    }}
                      className="hstack-left">
                      <i class="bi bi-folder"></i>
                      Create New Category
                    </button>
                  </div>
                </div>
              )}
            </div>

            {/* 4) Conditionally render either a <p> or an <input> */}
            {editingTitle ? (
              <input
                className="left-align title-text"
                value={tempName}
                onChange={(e) => setTempName(e.target.value)}
                onBlur={handleTitleBlur}
                onKeyDown={handleKeyDown}
                autoFocus

                style={{ width: `${Math.max(tempName.length, 1) + 2}ch` }}
              />
            ) : (
              <div
                onDoubleClick={handleTitleDoubleClick}
                onClick={handleTitleDoubleClick}
                className="left-align hstack-left">
                < p
                  className="title-text"
                >
                  {curDocument ? curDocument.name : "No Document Selected"}
                </p>
                {curDocument && <i class="bi bi-pencil"></i>}
              </div>
            )}
          </div>
        </div >

        <div className="centered vstack">
          {curDocument ?
            (
              <MainPdf />
            ) : (
              <>
                <p>
                  Drag and Drop
                </p>
                <br></br>
                <img src="import_icon.png" height="15%" width="auto" />

                <hr className="divider" style={{ width: "60%", margin: "16px auto" }} />

                {/* TODO: add an "Upload File" button */}
              </>
            )
          }
        </div>

        <div
          style={{
            whiteSpace: "pre-line",
            display: "flex",
            flexDirection: "column",
            height: "100%",
          }}
        >
          {curDocument ? (
            <>
              {/* <div style={{ flex: 1, overflow: 'auto' }}>
                                <p>{curDocument.text}</p>
                            </div> */}

              {docHasPdf ? (
                <div className="bottom-view" style={{ flexShrink: 0 }}>
                  <AudioControls />
                </div>
              ) : (
                <></>
                // <button
                //     onClick={() => setIsPdfModalOpen(true)}
                //     style={{ margin: 'auto' }}
                // >
                //     Attach PDF
                // </button>
              )}
            </>
          ) : (
            <>
              {/* <p style={{ margin: 'auto', marginBottom: '0' }}>Please select a document to view its contents.</p> */}
            </>
          )}
        </div>

        <PDFDropModal
          isOpen={isPdfModalOpen}
          onClose={() => setIsPdfModalOpen(false)}
        />
      </main >
    </div >
  );
}

export default MainApp;


```
File: src/components/layout/PDFDropModal.css
```
Content:
/* PDFDropModal.css */
.pdf-drop-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: calc(100% - 350px);
    /* Adjust width to exclude sidebar */
    margin-left: 350px;
    /* Start after sidebar width */
    height: 100%;
    background: rgba(255, 255, 255, 0.7);
    /* semi-opaque backdrop */
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1001;
    /* ensure on top of everything */
}

.pdf-drop-modal {
    background: rgba(255, 255, 255, 0.2);
    /* padding: 20px; */
    width: 100%;
    height: 100%;
    /* min-width: 400px; */
    /* min-height: 200px; */
    /* border-radius: 8px; */
    position: relative;
}

.pdf-drop-close {
    position: absolute;
    top: 10px;
    right: 10px;
    background: transparent;
    border: none;
    font-size: 24px;
    cursor: pointer;
}

.dropzone {
    width: 90%;
    height: 90%;
    /* border: 2px dashed #aaa; */
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 30px;
}

.small-svg svg {
    width: 20%;
    /* Scale to 1/5th */
    height: auto;
}

```
File: src/components/layout/MainAppContainer.js
```
Content:
// MainApp.js
import React from 'react';
import { Provider } from 'react-redux';
import store from '../../contexts/store';
import { CategoriesProvider } from '../../contexts/CategoriesContext';

import MainAppContent from './MainApp';

function App() {
    return (
        <Provider store={store}>
            <CategoriesProvider>
                <MainAppContent />
            </CategoriesProvider>
        </Provider>
    );
}

export default App;


```
File: src/components/layout/PDFDropModal.js
```
Content:
import React from 'react';
import './PDFDropModal.css';
import { useCategories } from '../../contexts/CategoriesContext';
import { ReactSVG } from 'react-svg';

export default function PDFDropModal({ isOpen, onClose }) {
    const { curDocument, pdfByDocId, attachPdfToDocument } = useCategories();

    if (!isOpen) return null; // Do not render anything if modal is closed.

    // The user can only attach a PDF if there's a selected doc
    // and if that doc does NOT already have a PDF
    const canDrop = !!(curDocument && !pdfByDocId[curDocument.id]);

    const handleDragOver = (e) => {
        // Only prevent default if we can drop (there's no PDF yet)
        if (canDrop) {
            e.preventDefault();
        }
    };

    const handleDrop = (e) => {
        e.preventDefault();
        if (!canDrop) {
            return;
        }

        const file = e.dataTransfer.files && e.dataTransfer.files[0];
        if (!file) return;

        if (file.type !== 'application/pdf') {
            alert("Only PDF files are allowed.");
            return;
        }

        // Attach PDF to the doc in the context
        attachPdfToDocument(curDocument.id, file);

        alert(`Successfully attached PDF to "${curDocument.name}"`);

        // Optionally close the modal
        onClose();
    };

    return (
        <div className="pdf-drop-overlay" onClick={onClose}>
            <div
                className="pdf-drop-modal"
                onClick={(e) => e.stopPropagation()}
                onDragOver={handleDragOver}
                onDrop={handleDrop}
            >
                {/* Close button */}
                {/* <button className="pdf-drop-close" onClick={onClose}>
                    &times;
                </button> */}

                {!curDocument && (
                    <p style={{ margin: 'auto' }}>No document selected. Please select a document first.</p>
                )}

                {curDocument && pdfByDocId[curDocument.id] && (
                    <p>
                        Document <strong>{curDocument.name}</strong> already has a PDF attached!
                    </p>
                )}

                {canDrop && (
                    <div className="dropzone vstack">
                        <p>
                            Drag and Drop
                        </p>
                        <br></br>
                        <img src="import_icon.png" height="15%" width="auto" />
                    </div>
                )}
            </div>
        </div >
    );
}


```
File: src/components/layout/Search.js
```
Content:
import React, { useState } from "react";
import "./Search.css";
import { useCategories } from "../../contexts/CategoriesContext";
// not fully functional yet, but does search
// like it will get the document based on word that u type, 
// whether that word is in the title or in the document itself
export default function Search() {
    const { documents, curDocument, setCurDocument } = useCategories();
    const [searchQuery, setSearchQuery] = useState("");
    const [searchResults, setSearchResults] = useState([]);

    const handleSearch = (query) => {
        setSearchQuery(query);
        const results = documents.filter(
            (doc) =>
                doc.name.toLowerCase().includes(query.toLowerCase()) ||
                doc.text.toLowerCase().includes(query.toLowerCase())
        );
        setSearchResults(results);
    };

    return (
        <div className="search-container">
            <input
                type="text"
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
                placeholder="Search documents..."
                className="search-input"
            />

            {searchQuery && (
                <div className="search-results">
                    {searchResults.length > 0 ? (
                        searchResults.map((doc) => (
                            <button
                                key={doc.id}
                                onClick={() => setCurDocument(doc)}
                                className={`search-result ${
                                    curDocument?.id === doc.id ? "active" : ""
                                }`}
                            >
                                {doc.name}
                            </button>
                        ))
                    ) : (
                        <p className="no-results">No documents found</p>
                    )}
                </div>
            )}
        </div>
    );
}


```
File: src/components/layout/MainApp.css
```
Content:
/* Reset and Base Styles */
body {
  margin: 0;
  padding: 0;
  font-family: Arial, sans-serif;
  background-color: #ffffff;
  /* Background for main content */
}

h1,
h2,
p {
  margin: 0;
}

/* Flex Utilities */
.hstack {
  display: flex;
  justify-content: center;
  align-items: center;
  flex: 1;
}

.vstack {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.subView {
  flex: 1;
  border-bottom: 1px solid #ccc;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* App Container */
.app-container {
  display: flex;
  flex-direction: row;
  width: 100%;
  height: 100vh;
  /* Full viewport height */
  /* overflow: hidden; */
  position: relative;
  /* Ensure proper stacking context */
  overflow: visible;
  /* Allow overflow for fixed elements like search */
}

/* Sidebar */
.sidebar {
  width: 300px;
  /* Adjust width as needed */
  background-color: #f9f9f9;
  padding: 20px;
  box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
  transform: translateX(0);
  /* Visible state */
  opacity: 1;
  transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
  flex-shrink: 0;
}

.sidebar.hidden {
  transform: translateX(-100%);
  /* Hidden state */
  opacity: 0;
}

.sidebar h2 {
  margin-top: 0;
}

.sidebar ul {
  list-style: none;
  padding: 0;
}

.sidebar li {
  margin: 10px 0;
  cursor: pointer;
}

.sidebar li:hover {
  text-decoration: underline;
}

/* Main Content */
.main-content {
  /* Instead of relying on flex, we’ll give it a margin when sidebar is visible */
  display: flex;
  flex-direction: column;
  margin-left: 0px;
  margin-left: 30px;
  transition: margin-left 0.3s ease-in-out;
  /* Smooth animation */
  padding: 20px;
  background-color: #ffffff;
  overflow-y: auto;
  /* Scrollable if content overflows */
  flex: 1 1 auto;

  overflow: visible;
  /* Prevent clipping of children */
}

.title-text {
  font-weight: bold;
  font-size: 1.5em;
}

/* When Sidebar is Hidden */
.sidebar-hidden .sidebar {
  transform: translateX(-100%);
  /* Sidebar slides out */
  opacity: 0;
  /* Sidebar fades out */
}

.sidebar-hidden .main-content {
  flex: 1 1 100%;
  /* transition: flex-grow 0.3s ease-in-out; */
  margin-left: 0;
  margin-left: -320px;
  /* width: 100%; */
}

/* Top and Bottom Views */
.top-view,
.bottom-view {
  flex: 0 0 auto;
  margin-top: 20px;
  margin-bottom: 20px;
}

.bottom-view {
  margin-top: auto;
}


/* Debug Borders (Optional - Remove for Production) */
/* .hstack,
.vstack,
.subView {
  border: 1px solid #ccc;
} */

.toggle {
  display: none;
  /* Hide by default */
}

.left-align {
  margin-right: auto;
  /* Push this element to the far right */
}

.toggle.sidebar-hidden {
  display: block;
  /* Show when the sidebar is hidden */
}

/* Container that keeps the popup positioned under the button */
.add-new-button-container {
  position: relative;
  /* So the popup is absolute to this container */
  display: inline-block;
}

/* The popup itself */
.add-new-popup {
  position: absolute;
  top: 100%;
  /* directly below the button */
  left: 0;
  z-index: 9999;
  min-width: 180px;
  /* wide enough so text doesn't wrap */
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  /* more rounded corners */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  margin-top: 4px;
  /* small gap below the button */
  /* overflow: hidden; */
  /* ensures corners are fully rounded */
}

/* Some inner padding if desired */
.add-new-popup-content {
  display: flex;
  flex-direction: column;
  padding: 4px 0;
  /* vertical spacing inside */
}

/* Each button in the popup */
.add-new-popup-content button {
  background: transparent;
  border: none;
  outline: none;
  width: 100%;
  text-align: left;
  padding: 8px 16px;
  cursor: pointer;
  white-space: nowrap;
  /* text stays on one line */
  transition: background-color 0.2s ease-in-out;
  font-size: 14px;
  /* optional: adjust font size */
}

/* Hover effect to 'deepen' the background */
.add-new-popup-content button:hover {
  background-color: #ececec;
}

.toggle {
  display: none;
}

.toggle.sidebar-hidden {
  display: block;
}

/* Hide the Add New button by default */
.add-new-toggle {
  display: none;
}

/* When sidebar is hidden, show the Add New button */
.sidebar-hidden .add-new-toggle {
  display: inline-block;
  /* or block, or whatever style you prefer */
}

/* The line (divider) */
.divider {
  width: 60%;
  margin: 16px auto;
  border: none;
  height: 2px;
  background-color: #333;
  border-radius: 2px;
}

/* Grayish background for the Upload File button */
.upload-button {
  background-color: #f0f0f0;
  /* light gray */
  color: #333;
  border: 1px solid #ccc;
  padding: 10px 18px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  margin-top: 12px;
  /* optional margin */
  transition: background-color 0.2s ease-in-out;
}

.upload-button:hover {
  background-color: #e0e0e0;
  /* a bit darker gray on hover */
}

.flex {
  flex: auto;
  margin: auto;
}

.centered {
  display: flex;
  justify-content: center;
  /* Centers horizontally */
  align-items: center;
  /* Centers vertically */
  height: 70vh;
  /* Full viewport height */
}

```
File: src/components/pdfViewer/MainPdf.css
```
Content:
.MainPdf {
  display: flex;
  flex-direction: column;
  height: 100%; /* Ensure it occupies space */
}


```
File: src/components/pdfViewer/PdfTopView.css
```
Content:
/* general pdf top view style */
.pdfTopView {
  /*general pdf top view style */
  width: 1000px;
  height: 40px;
  background-color: #dee7eb;
  border-radius: 16px 16px 0px 0px;
  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.3);

  /*content layout inside pdf top view*/
  display: flex;
  flex-direction: row;
  align-items: center;
  position: relative;
}

/* ----top view content layout section --- */
/* top view content padding */
.pdfTopView .topbar-search {
  padding-left: 10px;
  padding-right: 15px;
}

.pdfTopView .page-display {
  padding-left: 5px;
  padding-right: 5px;
  & > * {
    padding-left: 5px;
    padding-right: 5px;
  }
}

.pdfTopView .zoom-control {
  & > * {
    padding-left: 5px;
    padding-right: 5px;
  }
}

/* svg button icons style */
.pdfTopView i {
  font-size: 14px;
}

/* input page indicator style */
.pdfTopView input {
  width: 30px;
  height: 20px;
  border-radius: 5px;
  border: 1px solid black;
  text-align: center;
}

/* zoom control position style */
.zoom-control {
  position: absolute;
  left: 45%;
}

/* ----button style section---- */
/* button box style */
button {
  background-color: transparent;
  box-shadow: none;
}

button:hover {
  background-color: transparent;
  opacity: 1;
}


```
File: src/components/pdfViewer/PdfTopView.js
```
Content:
import React from "react";
import "./PdfTopView.css";
import "bootstrap-icons/font/bootstrap-icons.css";

const PdfTopView = () => {
  return (
    <div className="pdfTopView">
      <button className="topbar-search">
        <i className="bi bi-search"></i>
      </button>

      {/* page display section */}
      <div className="page-display">
        {/* previous page button */}
        <button>
          <i className="bi bi-caret-up"></i>
        </button>
        {/* page number display and jump*/}
        <input type="text" value="2" pattern="\d*" />
        <span>/</span>
        <span>20</span>

        {/* next page button */}
        <button>
          <i className="bi bi-caret-down"></i>
        </button>
      </div>

      <div className="zoom-control">
        {/* zoom out button */}
        <button>
          <i className="bi bi-zoom-out"></i>
        </button>
        {/* display zoom ratio */}
        <span>100%</span>
        {/* zoom in button */}
        <button>
          <i className="bi bi-zoom-in"></i>
        </button>
      </div>
    </div>
  );
};

export default PdfTopView;


```
File: src/components/pdfViewer/MainPdf.js
```
Content:
import React from "react";
import PdfTopView from "./PdfTopView";
import PdfViewer from "./PdfViewer";

function MainPdf() {
  return (
    <div className="MainPdf">
      <PdfTopView />
      <PdfViewer />
    </div>
  );
}

export default MainPdf;


```
File: src/components/pdfViewer/PdfViewer.js
```
Content:
import React from "react";
import "./PdfViewer.css";
import "bootstrap-icons/font/bootstrap-icons.css";
import pdfExample from "./pdfPageTest/pdfExample.png";
import verticalExample from "./pdfPageTest/verticalExample.jpg";

const PdfViewer = () => {
  return (
    <div className="pdfViewer">
      <div className="pdfLeftSideView">
        <button className="sideMenu-toggle">
          <i className="bi bi-layout-text-sidebar"></i>
        </button>
      </div>
      {/* <div className="pdfContent">
        <h1>This is PDF Content.</h1>
      </div> */}
      <div className="pdfExample">
        <img src={verticalExample} alt="pdfExample" />
      </div>
    </div>
  );
};

export default PdfViewer;


```
File: src/components/pdfViewer/PdfViewer.css
```
Content:
/* general pdf viewer style */
.pdfViewer {
  /*general pdf viewer style */
  width: 1000px;
  height: 460px;
  background-color: transparent;
  border-radius: 0px 0px 0px 0px;

  /*content layout inside pdf viewer*/
  display: flex;
  flex-direction: row;
}

/* pdf left side view style */
.pdfLeftSideView {
  /*general pdf top view style */
  width: 40px;
  height: 460px;
  background-color: #dee7eb;
  border-radius: 0px 0px 0px 0px;

  /*content layout inside pdf top view*/
  display: flex;
  flex-direction: column;

  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.3);
}

.sideMenu-toggle {
  position: relative;
  top: 10px;
}

.pdfExample {
  width: 960px;
  height: 460px;
  background-color: transparent;

  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: auto;

  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.3);
}

.pdfContent {
  width: 960px;
  height: 460px;
  background-color: pink;
  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.3);
}


```
File: src/components/pdfViewer/pdfPageTest/verticalExample.jpg
```
```
File: src/components/pdfViewer/pdfPageTest/pdfExample.png
```
```
